<!--
 File Name:         simulation.launch
 Date Created:      2017/05/18
 Date Modified:     2017/07/27

 Author:            Eric Cristofalo
 Contact:           eric.cristofalo@gmail.com

 Description:       ROS launch file for blob extraction and tracking with the rotor_simulator package
-->

<launch>

  <!-- ========== VISION AND FILTER LAUNCH FILE ========== -->
  <!-- <include file="$(find msl_rotors_simulation)/launch/basicBlobTracking.launch"> </include> -->
  <!-- <include file="$(find ec_filter)/launch/filter_gazebo.launch"> </include> -->

  <!-- ========== ARGUMENTS ========== -->
  <arg name="world_name" default="yosemite"/>
  <arg name="enable_logging" default="false"/>
  <arg name="enable_ground_truth" default="true"/>
  <!-- <arg name="mav_name" default="firefly_and_ball" /> -->
  <arg name="mav_name" default="hummingbird_ball" />
  <arg name="pi_2" default="1.57079632679" />
  <arg name="pi" default="3.14159265359" />

  <!-- ========== GAZEBO SIMULATION ========== -->
  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find rotors_gazebo)/worlds/$(arg world_name).world"/>
    <!-- <arg name="debug" value="true"/> -->
    <arg name="paused" value="false"/>
    <arg name="gui" value="false"/>
  </include>

  <!-- ========== MAV 1 ========== -->
  <group ns="$(arg mav_name)1">
    <include file="$(find msl_rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="namespace" value="$(arg mav_name)1" />
      <!-- <arg name="model" value="$(find msl_rotors_description)/urdf/mav_with_vi_sensor.gazebo" /> -->
      <arg name="model" value="$(find msl_rotors_description)/urdf/mav_with_rgb_camera.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg mav_name)1"/>
      <arg name="x" value="0.0"/>
      <arg name="y" value="0.0"/>
    </include>

<!--     <node name="joy_node" pkg="joy" type="joy_node" />
    <node name="rotors_joy_interface" pkg="rotors_joy_interface" type="rotors_joy_interface" />
    <node name="roll_pitch_yawrate_thrust_controller_node" pkg="rotors_control" type="roll_pitch_yawrate_thrust_controller_node" output="screen">
      <rosparam
        command="load" file="$(find msl_rotors_simulation)/resource/roll_pitch_yawrate_thrust_controller_$(arg mav_name).yaml" />
      <rosparam command="load" file="$(find msl_rotors_simulation)/resource/$(arg mav_name).yaml" />
      <remap from="odometry" to="odometry_sensor1/odometry" />
    </node> -->

    <node name="lee_position_controller_node" pkg="rotors_control" type="lee_position_controller_node" output="screen">
      <rosparam command="load" file="$(find msl_rotors_simulation)/resource/lee_controller_$(arg mav_name).yaml" />
      <rosparam command="load" file="$(find msl_rotors_simulation)/resource/$(arg mav_name).yaml" />
      <remap from="command_trajectory" to="/command/trajectory"/>
      <remap from="odometry" to="odometry_sensor1/odometry" />
    </node>
  	<node name="waypoint_publisher" pkg="rotors_gazebo" type="waypoint_publisher" output="screen" args="0 0 1 0 2"/>

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
  </group>

  <!-- ========== MAV 2 ========== -->
  <group ns="$(arg mav_name)2">
    <include file="$(find ec_rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="namespace" value="$(arg mav_name)2" />
      <!-- <arg name="model" value="$(find ec_rotors_description)/urdf/mav_with_vi_sensor.gazebo" /> -->
      <arg name="model" value="$(find ec_rotors_description)/urdf/mav_with_rgb_camera.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg mav_name)2"/>
      <arg name="x" value="1.0"/>
      <arg name="y" value="0.0"/>
      <arg name="yaw" value="$(arg pi)"/>
    </include>

<!--     <node name="joy_node" pkg="joy" type="joy_node" />
    <node name="rotors_joy_interface" pkg="rotors_joy_interface" type="rotors_joy_interface" />
    <node name="roll_pitch_yawrate_thrust_controller_node1" pkg="rotors_control" type="roll_pitch_yawrate_thrust_controller_node" output="screen">
      <rosparam
        command="load" file="$(find msl_rotors_simulation)/resource/roll_pitch_yawrate_thrust_controller_$(arg mav_name).yaml" />
      <rosparam command="load" file="$(find msl_rotors_simulation)/resource/$(arg mav_name).yaml" />
      <remap from="odometry" to="odometry_sensor1/odometry" />
    </node> -->

    <node name="lee_position_controller_node" pkg="rotors_control" type="lee_position_controller_node" output="screen">
      <rosparam command="load" file="$(find msl_rotors_simulation)/resource/lee_controller_$(arg mav_name).yaml" />
      <rosparam command="load" file="$(find msl_rotors_simulation)/resource/$(arg mav_name).yaml" />
      <remap from="odometry" to="odometry_sensor1/odometry" />
    </node>
    <node name="waypoint_publisher" pkg="rotors_gazebo" type="waypoint_publisher" output="screen" args="1 0 1 $(arg pi) 2"/>

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
  </group>


</launch>

